Structures and pointers

- C allows for pointers to structures

- pointers to structures are easier to manipulate than structures themselves

- it some older implementations, a structure cannot be passed as an argument to a function, but a pointer to a structure can.

- even if you can pass a structure as an argument, passing a pointer is more efficient

- many data representations use structures containing pointers to other structures

- you can define a variable to be a pointer to a struct

struct date *datePtr = NULL;

- the variable datePtr can be assigned just liek other pointers
    - you can set it to point to todaysDate with the assignment statement

datePtr = &todaysDate;

- you can then indirectly access any of the member of the date structure pointed to by datePtr

(*datePtr).day = 21;

- the above has the effect of setting the day of the date structure pointed to by the datePtr to 21
    - parentheses are required because the structure member operator . has higher precedence than the indirection operator *

- to test the value of month stored in the date structure pointed to by datePtr

if ((*datePtr).month == 12)
    ...

- pointers to structures are so often used in C that a special operator exists
    - the structure pointer operator ->

    (*x).y

    to be more clearly expressed as

    x->y 

    - the previous if statement

    if (datePtr->month == 12)

Structures containing pointers

- a pointer can be a member of a structure

struct intPtrs
{
    int *p1;
    int *p2;
};

- a structure called intPtrs is defined to contain two integer pointers
    - p1
    - p2

- you can define a variable of type struct intPtrs

struct intPtrs pointers;

- the variable pointers can now be used just like other structures
    - pointers itself is not a pointer, but a structure variable that has two pointers as its members

struct intPtrs
{
    int *p1;
    int *p2;
};

struct intPtrs pointers;
int i1 = 100, i2;

pointers.p1 = &i1;
pointers.p2 = &i2;
*pointers.p2 = -97;

printf("i1 = %i, *pointers.p1 = %i\n", i1, *pointers.p1);
printf("i2 = %i, *pointers.p2 = %i\n", i2, *pointers.p2);

Arrays or pointers

struct names 
{
    char first[20];
    char last[20];
};

OR 

struct pnames 
{
    char * first; //
    char * last;  // NOO MEMORY ALLOCATED
};

- both are valid but different

struct names veep = {"Talia", "Summers"};
struct pnames treas = {"Brad", "Fallingjaw"};
printf("%s and %s\n", veep.first, treas.first);

- the struct names varialbe veep
    - the strings are stored inside the structure
    - structure holds the two address, which takes a total of 16 bytes on our system
    - the struct pnames structure allocates no space to store strings
    - it can be used only with strings that have had space allocated for them elsewhere
        - such as string constants or strings in arrays

- the pointers in pnames structure should be used only to manage strings that were created and allocated elsewhere in a program (malloc)

- one instance in which it does make sense to use a pointer in a structure to handle a string is if you are dynamically allocating that memory
    - use a pointer to store the address
    - has the advantage that you can ask malloc() to allocate just the amount of space that is needed for a string

struct namect
{
    char * fname; // using pointers instead of arrayts
    char * Iname;
    int letters;
};

- understanding that the two strings are no stored in the structure
    - stored in the chunk of memory managed by malloc()
    - the addresses of the two strings are stored in the structure
    - addresses are what string-handling functions typically work with

void getinfo(struct namect * pst)
{
    char temp[SLEN];
    printf("Please enter your first name.\n");
    s_gets(temp, SLEN);

    // allocate memory to hold name
    pst->fname = (char*)malloc(strlen(temp) + 1);

    // copy name to allocated memory
    strcpy(pst->fname, temp);
    printf("Please enter your last name.\n");
    s_gets(temp, SLEN);
    pst->lname = (char*)malloc(strlen(temp) + 1);
    strcpy(pst->lname, temp);
}
