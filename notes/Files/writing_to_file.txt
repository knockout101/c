- the simplest writing operation is provided by the function fputc()
    - writes a single character to a text file

int fputc(int ch, FILE *pfile);

- the function writes the character specified by the first argument to the file identified by the second argument (file pointer)
    - returns the character that was written if successful
    - return eof if failure

- in practice, characters are not usually written to a physical file one by one
    - extremely inefficient

- the putc() function is equivalent to fputc()
    - requires the same arguments and the return type is the same
    - difference between them is that putc() may be implemented in the standard library as a macro, whereas fputc() is a function

#include <stdio.h>

int main()
{
    FILE *fp;
    int ch;

    fp = fopen("file.txt", "w+");

    for (ch = 33; ch <= 100; ch++)
        fputc(ch, fp);

    fclose(fp);
    return 0;
}

- you can use the fputs() function to write to any file or stream

int fputs(const char * str, FILE * pfile);

- the argument is a pointer to the character string that is to be written to the file

- the second argument is the file pointer

- this function will write characters from a string until it reaches a '\0' character
    - does not write the null terminator character to the file
        - can complicate reading back variable-length strings from a file that have been written by fputs()
        - expecting to write a line of text that has a newline character at the end
    
#include <stdio.h>

int main()
{
    FILE *filePointer;

    filePointer = fopen("file.txt", "w+");

    fputs("This is Tristan Sargent.", filePointer);
    fputs("I am happy to be here.", filePointer);

    fclose(filePointer);

    return 0;
}

- the standard function for formatted output to a stream is fprintf()

int fprintf(FILE *stream, const char *format,...)

- the first argument is the file pointer

- the second argument is the format
    - string that contains one or more of the following items
        - whitespace character
        - non-whitespace character
        - format specifiers
        - usage is similar to printf, but, top a file

- if successful, the total number of characters written is returned otherwise, a negative number is returned

#include <stdio.h>
#incldue <stdlib.h>

int main()
{
    FILE *fp;

    fp = fopen("file.txt", "w+");
    fprintf(fp, "%s %s %s %s %d", "Hello", "my", "number", "is", "555");

    fclose(fp);
    return 0;
}
