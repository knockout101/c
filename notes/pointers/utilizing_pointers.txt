Overview
    - C offers several basic operations you can perform on pointers
    - You can assign an addresss to a pointer
        - assigned value can be an array name, a variable preceded by address operator (&), or another second pointer.

    - you can dereference a pointer 
        - the * indirection operator gives the stored value at the pointed-to location

    - you can take a pointer address
        - the & operator tells you where the pointer itself is stored

    - you can perform pointer arithmetic
        - use the + operator to add an integer to a pointer or a pointer to an integer (integer is multiplied by the number of bytes in the pointed-to type and added to the original address)
        - increment a pointer by one (useful in arrays when moving to the next element)
        - use the - operator to substract an integer from a pointer (interger is a mutlipled by the number of bytes in the pointed-to type and subtracted from the original address)
        - decrementing a pointer by one (useful in arrays when going back to the previous element)
        - you can find the differnce between two pointers
            - yo udo this for two pointers to elements that are in the same array to find out how far apart the elements are
        - you can use the relational operations to compare the values of two pointers
            - pointers must be the same type
        - remember, there are two forms of subtraction
            - you can subtract one pointer from another to get an integer
            - you can subtract an integer from a pointer and get a pointer
        - be careful when incrementing or decrementing pointers and causing an array "out of bounds" error
            - computer does not keep track of whether a pointer still points to an array element

    - The value referenced by a pointer can be used in an arithmetic expression
        - if a variable is defined to be of type "pointer to integer" then it is evaluated using the rules of integer arithmetic

        int number = 0;
        int *pnumber = NULL;
        number = 10;
        pnumber = &number;
        *pnumber += 25;

        - increments the value of the number variable by 25
        - * indicates you are accessing the contents to which the variable called pnumber is pointing to

        - if a pointer points to a variable x
            - that pointer has been defined to be a pointer to the same data type as is x
            - use of *pointer in an expression is identical to the use of x in the same expression

    - a variable defined as a "pointer to int" can store the address of any variable of type int

    int value = 999;
    pnumber = &number;
    *pnumber += 25;

    - the statement will operate with the new variable, value
        - the new contents of value will be 1024

    - a pointer can contain the address of any variable of the appropriate type
        - you can use one pointer variable to change the values of many different variables
        - as long as they are of a type compatible with the pointer type

    int main(void)
    {
    long num1 = 0;
    long num2 = 0;
    long *pnum = NULL;

    pnum = &num1;
    *pnum = 2L;
    ++num2;
    num2 += *pnum;

    pnum = &num2;
    ++*pnum;

    printf("num1 = %ld num2 = %ld *pnum = %ld *pnum + num2 = %ld\n", num1, num2, *pnum, (*pnum + num2));

    return 0;
    }

    - when you have a pointer that already contains an address, you can use the pointer name as an argument for scanf()

    int value = 0;
    int *pval = &value;

    printf("Input an integer: ");
    scanf(" %d", pval);

    printf("Value: %d", value);

    DO NOT DEREFERENCE AN UNINITIALIZED POINTER ----------------

    int *pt;
    *pt = 5;

    - second line means store the value 5 in the location to which pt points 
        - pt has a random value, there is no knowing where the 5 will be placed

    - it might go somewhere harmless, it might overwrite data or code, or it might cause the program to crash

    - creating a pointer only allocates memory to store the pointer itself
        - it does not allocate memory to store data
        - before you use a pointer, it should be assigned a memory location that has already been allocated
            - assign the address of an existing variable to the pointer
            - or you can use the malloc() function to allocate memory first

    - we already know that when declaring a pointer that does not point to anything, we should intiialize it to NULL

    int *pvalue = NULL;

    - NULL is a special symbol in C that represents the pointer equivalent to 0 with ordinary numbers
        - the below also sets a pointer to null using 0

    int *pvalue = 0;

    - because NULL is the equivalent of zero, if you want to test where pvalue is NULL, you can do this:
        - or you can do it explicitly by using == NULL

        if (!pvalue) ...

        - you want to check for NULL before you dereference a pointer
            - often when pointers are passed to functions