Pointer Arithmetic

- the real power of using pointers to arrays comes into play when you want to sequence trough the elements of an arrays

*valuesPtr // can be used to acces the first integer of the values array, that is, values[0]

- to reference values[3] through the valuesPtr variabl, you can add 3 to valuesPtr and then apply the indirection operator

*(valuesPtr + 3)

- the expression, *(valuesPtr + i) can be used to access the value contained in values[i]
    - to set values [10] to 27, you could do the following

values[10] = 27;

- or, using valuesPtr, you could

*(valuesPtr + 10) = 27;

- to set valuesPtr to point to the second element of the values array, you can apply the address operator to values[1] and assign the result to valuesPtr

valuesPtr = &values[1];

- if valuesPtr points to values[0], you can set it to point to values[1] by simply adding 1 to the value of valuesPtr

valuesPtr += 1;

- this is a perfectly valid expression in C and can be used for pointers to any data type

- the increment and decrement operators ++ and -- are particularly useful when dealing with pointers

- using the increment operator on a pointer has the same effect as adding one to the pointer
- using the decrement operator on a pointer has the same effect as adding one to the pointer

++valuesPtr;

- sets valuesPtr pointing to the next integer in the values array (values[1])

--textPtr;

- sets valuesPtr pointing to the previous integer in the values array, assuming that valuesPtr was not pointing to the beginning of the values array

