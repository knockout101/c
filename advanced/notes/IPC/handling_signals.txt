Overview 

- it is possible to handle or catch almost all signals in your program 

- sometimes you need to run your own code when receiving a signal (handle/catch)
    - maybe your process has files or network connections open 
        - might want to tidy up things before exiting 

- its also possible to igore almost all signals 

- a few signals cannot be ignored or handled/caught 
    - SIGKILL, SIGABRT and SIGSTOP (which is why "Kill 9" is the ultimate kill statement)

- the actions performed for signals are 
    - default action 
    - handle the signal
    - ignore the signal

Hanlding/Catching a signal

- the signal handling library (<signal.h>) provides the capability to catch and handle signals
    - signal handling can be done in two different ways through system calls 
        - signal() or sigaction() 

- this function is used to tell the operating system which function it should call when a signal is sent to a process 
    - the function is used to deal with (or handle) a signal that is sent to it 

- if you have a function called foo() that you want the operating system to call when someone sends an interrupt signal to your process 
    - you need pass the function name foo to the signal function as a parameter 
    - the funtion foo() is called the handler 

- handlers are intended to be short, fast pieces of code 
    - they should do just enough to deal with the signa lthat has been received

- the signal function receives two arguments 
    - an integer signal number and a pointer ot the signal handling function 

- the signal function retunrs 
    - on success retunrs the address of a function that takes an integer argument and has no return value 
    - on error returns SIG_ERR in case of error

#include <signal.h>

typedef void(*sighandler_t)(int);
sighandler_t signal(int signum, sighandler_t handler);

- the system call signal() would call the registered handler (second parameter) upon generation of signal

- the handler can be either one of 
    - SIG_IGN (Ignoring the signal)
    - SIG_DFL (setting signal back to default mechanism)
    - or user-defined signal handler or function address 

Handling/Catch a signal (sigaction)

- you can handle or catch signals in your program using a sigaction 

- a sigaction is essentially a function wrapper 
    - a struct that contains a pointer to a function 

- sigactions are used to tell the operating system which function it should call when a signal is sent to a process
    - the function is used to deal with (or handle) a signal that is sent to it 

- if you have a function called foo() that you want the operation system to call when someone sends an interrupt signal to your process
    - you need to wrap the foo() function up as a sigaction 
    - the function foo() is called the handler

- handlers are intended to be short, fast pieces of code 
    - they should do just enough to deal with the signal that has been received

- the signal handling library <signal.h> provides the capability

int sigaction(int signum, const struct sigaction *newaction, struct sigaction *oldaction)

- sigaction() takes three parameters:
    - the signal number
        - the integer value of the signal you want to handle
    - the new action 
        - this is the address of the new sigaction you want to register
    - the old action 
        - if you pass a pointer to another sigaction, it will be filled with details of the current handler that you are about to replace 
        - if you do not care about the existing signal handler, you can set this to NULL

- the sigaction() function will return -1 if it fails and will also set the errno variable 
    - you should always check for errors in your own code 

- sigaction structure contains the following: 
    - field1 - handler mentioned either in sa_handler or sa_sigaction 

    void (*sa_handler)(int);
    void (*sa_sigaction(int, siginfo_t*, void*);

    - field2 - set of signals to be blocked 

    int sa_mask;

        - this variable specifies the mask of signals that should be blocked during the execution of signal handler

    - field3 - special flags

    int sa_flags;

    - this field specifies a set of flags which modify the behavior of the signal

    - field4 - restore handler

    void (*sa_restorer)(void); // returnes 0 on success and -1 in case of failure

- the handler for sa_handler specifies the action to be performed based on the signum
    - SIG_DFL indicating default action
    - SIG_IGN to ignore the signal or pointer to a signal handling function

- the handler for sa_sigaction 
    - specifies the signal number as the first argument
    - specifies the pointer to siginfo_t structure as the second argument
    - specifies the pointer to user content as the third argument(out of scope)

- the structure siginfo_t contains signal information such as the signal number to be delivered, signal value, process id, real user id of sending process, etc.

- the operating system talks to processes using signals
    - programs are normally stopped using signals
        - for most error signals, the default handler stops the program

- handlers can be replaced with the signal() or sigaction functions 

- you can send signals to yourself with raise()

- the interval timer sends SIGALRM signals
    - the alarm() function sets the interval timer
    - there is one timer per process

- kill sends signals to process
    - kill -KILL will always kill a process

