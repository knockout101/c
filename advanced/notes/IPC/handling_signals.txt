Overview 

- it is possible to handle or catch almost all signals in your program 

- sometimes you need to run your own code when receiving a signal (handle/catch)
    - maybe your process has files or network connections open 
        - might want to tidy up things before exiting 

- its also possible to igore almost all signals 

- a few signals cannot be ignored or handled/caught 
    - SIGKILL, SIGABRT and SIGSTOP (which is why "Kill 9" is the ultimate kill statement)

- the actions performed for signals are 
    - default action 
    - handle the signal
    - ignore the signal

Hanlding/Catching a signal

- the signal handling library (<signal.h>) provides the capability to catch and handle signals
    - signal handling can be done in two different ways through system calls 
        - signal() or sigaction() 

- this function is used to tell the operating system which function it should call when a signal is sent to a process 
    - the function is used to deal with (or handle) a signal that is sent to it 

- if you have a function called foo() that you want the operating system to call when someone sends an interrupt signal to your process 
    - you need pass the function name foo to the signal function as a parameter 
    - the funtion foo() is called the handler 

- handlers are intended to be short, fast pieces of code 
    - they should do just enough to deal with the signa lthat has been received

- the signal function receives two arguments 
    - an integer signal number and a pointer ot the signal handling function 

- the signal function retunrs 
    - on success retunrs the address of a function that takes an integer argument and has no return value 
    - on error returns SIG_ERR in case of error

#include <signal.h>

typedef void(*sighandler_t)(int);
sighandler_t signal(int signum, sighandler_t handler);

- the system call signal() would call the registered handler (second parameter) upon generation of signal

- the handler can be either one of 
    - SIG_IGN (Ignoring the signal)
    - SIG_DFL (setting signal back to default mechanism)
    - or user-defined signal handler or function address 

    
