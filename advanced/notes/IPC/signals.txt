Overview 

- signals are a limited form of inter-process communication (IPC), typically used in UNIX like OS
    - a notification to a process indicating the occurence of an event 

- signals are a way to communicate information to a process about the state of other processes, the operating system and hardware, so that the process can take appropriate action 

- signals are generated by the system or the user can also generate the signal programmatically 

- when a signal is sent, the opearting system interrupts the target process normal flow of execution to deliver the signal 

- a process can receive a particular signal asynchronously (at any time)
    - after receiving the signal, the process will interrupt its current operations 
        - the process has to stop whatever it is doing and go deal with the signal 
            - it will either handle or ignore the signal, or in some cases terminate 

- there are fix sets of signals that can be sent to a process defined bty the operating system 

- a signal is just a short message which contains a single integer value 

Example 

- when we are working in the shell and wish to "kill all cat programs" we type the command 
    - killall cat - sends a signal to all processes named cat that says "terminate" (SIGTERM)

- signals are also used in the context of terminal isgnaling which is how programs stop, start, and terminate 
    - typing ctrl-C that is the same as sending a SIGINT signal 
    - typing ctrl-z that is the same as sending a SIGTSTP signal 
    - typing fg or bg that is the same as sending a SIGCONT signal 

- when a program calls the fgets() function 
    - the operation system reads the data from the keyboard, and when it sees the user hit ctrl-C, sends an interrupt signal to the program 

- some other signal events include 
    - illegal instructions, segmentation violations, termination orders from the operation system 
    - floating-point exceptions (division by zero or multiplying large floating-point values)

default actions 

- whenever a signal is raised (either programmatically or system generated signal), a default action is performed for some signals 

- Term - the process will terminate 

- Core - the process will terminate and produce a core dump file that traces the process state at the time of termination 

- Ign - the process will ignore the signal 

- Stop - the process will stop, like with a ctrl-Z 

- Cont - the process will continue from being stopped 

- each signal has a name, value and default action that a process will take in response 
    - each signal starts with SIG 
    - available signals can be checked with the command kill -l (l for Listing signal names)

Raising A Signal 

- a signals can be generated by a user programmatically in addition to be sent by the OS (Operating System)

- the signal handling library <signal.h> provides the capability to raise specific signals 

- a signal can be generated by calling raise() or kill() system calls 
    - raise() sends a signal to the current process 
    - kill() sends a signal to a specific process 

int raise(int sig)

- if this function is executed successfully, the signal specified in sig is generated 

- if the call is unsuccessful, raise() returns a non-zero value 

- the function raise() can only send a signal to the program that contains it 
    - cannot send a signal to other processes 
    - to send a signal to other processes, the system call kill() should be used 

- after raising the signal, the execution of the current process is stopped

