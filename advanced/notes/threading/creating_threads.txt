pthreads API

- thread management
    - routines that work directly on threads - creating, detaching, joining, etc.
    - also include functions to set/query thread attributes (joinable, scheduling etc.)

- synchronization
    - Routines that manage read/write locks and barriers and deal with synchronization
    - mutex functions provide for creating, destroying, locking and unlocking mutexes (mutual exclusion)

- condition variables
    - routines that address communications between threads that share a mutex
    - based upon programmer specified conditons

- operations that can be performed on threads include 
    - thread creation
    - termination
    - synchronization (joins, blocking)
    - scheduling
    - data management
    - process interaction

Creating a thread

- on POSIX operating systems, there is a library named pthread.h
    - allows you to create threads and perform many operations on threads
    - must include this library when creating and using threads

- pthread_create() is called to create a new thread and make it executable
    - initially, main() comprises a single, default thread and all other threads must be explicitly created by the programmer

- the maximum number of threads that may be created by process is implementation dependent
    - once created, threads are peers, and may create other threads
    - there is no implied hierarchy or dependency between threads

int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void* (*start_routine)(void*), void* arg);

- pthread_create() takes four arguments

- the first argument is of type pthead_t
    - an integer used to identify the thread in the system
    - examples of attributes that can be specified include detached state, scheduling policy, scope, stack address, and stack size

- the third argument is name of the function that the thread will execute once it is created

- the fourth argument is used to pass arguments to the function (start_routine)
    - a pointer cast of type void is required
    - NULL may be used if no argument is to be passed
    - to pass multiple arguments, you would need to use a pointer to a structure

- pthread_join()
    - it is often useful to be able to identify when a thread has completed and exited
    - the method for doing this is to join the thread, which is a lot like the wait() call for processes
    - join is performed when one wants to wait for a thread to finish
        - used to link the current thread process to another thread
        - a thread calling routine may launch multiple threads then wait for them to finish to get the results

- a call to pthread_join blocks the calling thread until the thread with identifier equal to the first argument terminates
    - makes the program stops in order to wait for the end of the selected thread

- typically, only the main threads calls join, but other threds can also join each other

- all threads are automatically joined when the main thread terminates

- pthread_join() also receives the return value of your thread function and stores it in a void pointer variable
    - once both threads have finished, your program can exit smoothly

int pthread_join(pthread_t thread, void **value_ptr);

- the first argument is the thread id of the thread you want to wait for

- if the second argument is not NULL, this value is passed to pthread_exit() by the terminating thread

pthread_exit

- threads can be terminated in a number of ways
    - by explicitly calling pthread_exit
    - by letting the thread function return
    - by a call to the function exit which will terminate the process including any threads

- typically, the pthread_exit() routine is called after a thread has completed its work and is no longer required to exist

- if main() finishes before the threads it has created finish, and exits with pthread_exit(), the other threads will continue to execute
    - otherwise, they will automatically be terminated when main() finishes

- although not explicitly required to call pthread_exit() at the end of the thread function
    - it is good practice to do so, as you may have the need to return some arbitrary data back to the caller via pthread_join()

void pthread_exit(void *value_ptr);

- the first argument makes the value_ptr available to any successful join with the terminating thread

- sometimes it is desirable for a thread not to terminate (eg, a server with a worker thread pool)
    - can be solved by placing the thread code in an infinite loop and using condition variables

