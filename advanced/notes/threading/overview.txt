Processes

- simple processes doone thing at a time 

- most of the programs we have written so far have had a single path of execution

Working on tasks at the same time

- processes take time to create
    - creating a process for each task is not efficient

- processes cannot share data easily

- processes are just plain difficult

Threads

- threads are a way to divide a single process into sub-runnable parts
    - seperate path of execution inside a program
    - sometimes called lightweight processes

- a thread can also be scheduled independently of the larger program that it is inside of (done by the OS)
    - means that a single program may actually use more than 100% of CPU resources on multi-processor machines

- a thread has its own unique ID, program counter (PC), a register set, and a stack space just like a process

- threads share memory across each thread by having the same address space (unline multi-processes)
    - two threads have access to the same set of variables and can alter each other's variable values
        - if one thread chanes a global variable, all of the other threads will see the change immediately

- threads also share OS resources like open files and signals
    - all of the threads will all be able to read and write to the same files and talk on the same network sockets

Multi-threading

- threads are popular way to improve an application through parallelism (simultaneous running of code)
    - several tasks can execute concurrently

- each thread runs independently "thread of execution"

- multi-threading means you can give each thread a separate task and they will be performed at the same time
    - in a browser, multiple tabs can be different threads
    - MS word uses multiple threads, one thread to format the text, other thread to process inputs, etc.

Advantages

- less overhead for threads compared to forking process

- threads provide efficient communication and data exchange because they share the same address space

- threaded applications offer potential performance gains and practical advantage over non-threaded applications in several ways
    - creation of threads is much faster, less overhead
    - faster context switching
    - faster termination of a thread

Disadvantages

- considerable potential for very obscure errors in your code

- providing for thread synchronization is the biggest issue
    - the potential for two or more threads attempting to access the data at the same time

- imagine a program with several threads that may access a variable containing salary data

- suppopse that two independent threads can modify the value

- if one thread accesses the value to change it and the second thread does the same before the first thread has stored the modified value
    - you will have inconsistent data

Multi-threading in C

- C is a language that runs on one thread by default (main), which means that the code will only run one instruction at a time

- C does not contain any built in support for multithreaded application
    - unless you count C11, but, theses threads are not very portable or widely supported

- threading was traditionally provided via hardware and OS support in the past
    - implementations differed substantially from each other making it difficult for programmers to develop portable threaded applications

- in order to take full advantage of the capabilities provided by threads, a standardized programming interface was required

- in 1995, POSIX became the standard interface for many system calls in UNIX including the threading environment

- we are going to write multi-threaded C programs using POSIX threads
    - also known as pthreads, implementation is available with the gcc compiler
        - the key model for programming with threads in nearly every language (Java, python, and other high level languages)

POSIX thread (pthread) libraries

- the POSIX thread libraries are a standards based thread API for C/C++
    - allows one to spawn a new concurrent process flow 
    - can be found on almost any modern POSIX-compliant OS

- it is most effective on multi-processor or multi-core systems where the process flow can be scheduled to run on another processor
    - thus gaining speed through parallel or distributed processing

- a thread is spawned by defining a function and it's arguments which will be processed in the thread

- the purpose of using the POSIX thread library in your software is to execute software faster

- pthread functions are defined in a pthread.h header file and implemented in a thread library

