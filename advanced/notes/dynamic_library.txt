Overview

- every program linked against this library shares the same one copy 
    - contrast to static linking, in which everyone is (wastefully) given their own copy of the contents of the library 

- a dynamically linked library (shared object) is created by the link editor 
    - the name of the link editor is the command ID 

- standard convention is to name dynamic libraries 
    - lib<something>.so (shared object)
        - names begin with lib and end with a .so extension 
        - similar to windows extension .dll and mac extension .dylib 

- you can use the ldd command to linux to list all of the shared objects for a given binary/executable 
    - ldd name-of-executable 

gcc -g -fPIC .\src\dynamic_library.c -I .\headers\ -shared -o lib_dynamic_lib.dll // -fPIC necessary for dynamic library and -I for including directory for headers

- the .dll is for windows and in UNIX based systems its .so (shared object)

- the compiler expects to find the libraries in certain directories 
    - the compiler looks in a few special places 
    - threads library is in ../libthread.so 

- the compiler option -Lpathname is used to tell the linker a list of other directories in which to search for libraries 
    - LD_LIBRARY_PATH AND LD_RUN_PATH can also be used to provide this info 
    - better to use the -Lpathname -Rpathname options at linktime instead 

- the name that follows the -l option needs to match part of the library name 

- if your archive is called libawesome.so, you can compile your program with the -lawesome switch 

