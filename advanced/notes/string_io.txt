- gets function stands for get string and reads a line from standard input into a buffer 
    - reads until a terminating newline or EOF is found
    - takes one argument, a pointer to an array of chars where the string is stored 
    - returns str on success, and NULL on error or when end of file occurs 

char *gets(char *str)

- this function is deprecated and should never be used 
    - removed from C11 
    - two options instead (C99) are to use fgets() or getchar()

- Never Invoke the gets() function 
    - no check for buffer overflow is performed
    - it is impossible to tell without knowing the data in advance how many characters gets() will read
        - gets() will continue to store characters past the end of the buffer 

- fgets is used for reading entire lines of data from a file/stream (file get string)
    - has similar behavior to gets()
        - accepts two additional arguments 
            - the number of characters to read 
            - an input stream (when specified as stdin, same behavior as gets())

char *fgets(char *buffer, int n, FILE *stream)

- buffer is a pointer to a character array where the line that is read in will be stored 
- n is an integer value that represents the maximum number of characters to be stored into buffer, including the null character 
- stream is the pointer to object that indentifies the stream where characters are read from 
    - usually used with a file stream, however, standard input stream is also acceptable 

- reads characters from the specified file until a newline character has been read or until n-1 characters have been read (whichever occurs first)
    - a null character is written immediately after the last character read into the array 
    - returns the value of buffer if the read is successful 
    - returns the value NULL if an error occurs on the read or if an attempt is made to read past the end of the file 