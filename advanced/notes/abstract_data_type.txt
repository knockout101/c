- a type specifies two kinds of information 
    - a set of properties 
        - the int type's property is that it represents an integer value and shares the properties of integers 
    - a set of operations 
        - you can perform arithmetic operations on ints (add, subtract, multiply, etc)

- when you declare a variable to be an int, you are saying that these adn only these opeartions can affect it

Abstract Data type

- an ADT is a type who behavior is defined by a set of value and a set of operations
    - sounds like a structure in C 

- the definition of ADT only mentions what operations are to be performed 
    - not how these operations will be implemented 
    - does not specify how data will be organized in memory nor what algorithms will be used for implementing the operations 

- it is called "abstract" because it gives an implementation-independent view 
    - thte process of providing only the essentials and hiding the details is known as abstraction 
    - a contract for a type of data structure 

Creating a new Abstract Data type

- suppose you want to define a new data type 
    - you have to provide a way to store the data 
        - usually by designing a structure 
    - you have to provide ways of manipulating the data 
        - adding, deleting, etc

- to define new data types, you want to follow a three-step process (from more abstract to more concrete)

- provide an abstract description of the type's properties and of the operations you can perform on the type 
    - not tied to any particular implementation 
    - referred to as an abstract data type (ADT)

- develop a programming interface that implements the ADT
    - indicate how to store the data 
    - describe a set of functions that perform the desired operations 

- write code to implement the interface 

Abstraction example 

- for a list abstract data type, the data is a number of items 

- a list should be able to hold a sequence of itmes in some kind of order 

- the list type should support operations such as adding an item to the list 

- here are some useful operations
    - initializing a list to empty 
    - adding an item to the end of a list 
    - determining whether the list is empty
    - determining whether the list is full 
    - determining how many items are in the list 

- the above is an abstract definition of a list data type 
    - a data object capable of holding a sequence of items and to which you can apply any of the above operations 
    - does not state what kind of itmes can be stored in the list
    - does not specify how to store the items or what algorithms to use 

ADT's

- linked lists 
- stacks 
- queues 
- binary trees 

Linked List ADT 
    - insert 
    - delete
    - deleteAt 
    - size 
    - isEmpty 
    - search 
    - display 

Stack 
    - push 
    - pop 
    - peek 
    - size 
    - isEmpty 

Queue 
    - enqueue 
    - dequeue 
    - peek 
    - size 
    - isEmpty 

Binary Tree 
    - insert 
    - delete 
    - search 
    - size 
    - preorder traversal 
    - postorder traversal 
    - inorder traversal

