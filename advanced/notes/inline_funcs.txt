Overview 

- normally, a function call has overhead when being invoked 

- C99 added concept of inline functions to avoid overhead 

- the point of making a function inline is to hint to the compiler that it is worth making some form of extra effort to call the function faster than it would otherwise 
    - usually the compiler will substitue the code of the function into its caller (eliminating the need for a call and return sequence)
        - the program no longer calls that function, the compiler replaces every call to an inline function with the code body of that function 

- the inline declaration is only advice to the compiler, which can decide to ignore it 
    - may cause the compiler to replace the function call with inline code and/or perform some other sorts of optimizations or it may have no effect 

- inline functions can improve the runtime performance of a program 
    - not guaranteed 
    - whether an inline function serves your purpose in a positive or in a negative way depends purely on your code design and is largely debatable 

- common misconception that inlining always equals faster code 
    - if there are many lines in inline function or there are more function calls, then inlining can cause wastage of space 

- inline functions can increase the size of the program 
    - it increases file size as the same function code is copied again and again in the program wherever it is called 

- making a function inline has no effect on the logic of the program from the user's perspective 

- only declare functions as inline if they are short and called frequently
    - a long function, the time consumed in calling the function is short compared to the time spent executing the body of the function 
        - no great savings in time using an inline version

- declare inline function by putting "inline" keyword before the function declaration for performance reasons 

inline void randomFunction();

- there are different places to create inline function definitions (same file or header file) 

- for the compiler to make inline optimizations, it has to know the contents of the function defition 

- inline functions definition has to be inthe same file as the function (internal linkage)

- should always use the inline function specifier along with the static storage-class specifier (using extern less portable)
    - inline functions are usually defined before their first use in a file (definition also acts as a prototype)

inline static void foo() // inline definition/prototype
{
    // do something
}
