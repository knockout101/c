Overview 

- process of creating a C program involves many different steps
    - preprocessor
    - compilation
    - assembler
    - linker
    - loader

- a program called the preprocessor is invoked before any code gets compiled in the C programming language 
    - a separate step in the compilation process 
    - not part of the compiler

- C preprocessor is essentially a text substitution tool 
    - instructs the compiler to do required pre-processing before the actual compilation 

- C preprocessor mainly performs three tasks on your code 

1. removes all the comments
    - a comment is only for other engineers to understand code 
        - it is of no use to a machine 
    - preprocessor removes all comments from source code before compilation 

2. Includes all of the files from various libraries that the program needs to compile
    - #include directive (includes the contents of the library file specified)

3. expansion of macro definitions 

- commands used by the preprocessor are called preprocessor directives and they begin with "#" symbol
    - must be the first nonblank character 
    - should begin in the first column 

- preprocessor offers operators which can help in creation of macros 
    - we will discuss macros in our next section 

- these operators are used in the context of the #define directive

- we will learn about the following operators in the next section 
    - continuation operator(\)
    - concatenation operators 
        - (#) when used within a macro definition, converts a macro parameter into a string constant 
        - (##) within a macro definition combines two arguments 
            - permits two separate tokens in the definition to be joined into a single token 
        - defined()
            - simplifies the writing of compound expressions in certain macro directives 

