Overview 

- the void type of pointer is a special type of pointer 
    - void represents the absence of type (a generic pointer)

- void pointers are pointers that point to a value that has no type 

- a void pointer can point to a variable of any data type 
    - from an integer value or a float to a string of characters 

void* pointer_name;

- the size of a void pointer is similar to the size of the character pointer 
    - has the same representation and alignment requirements as a pointer to a character type 

Example:
void* vp;

int a = 100, *ip;
float f = 12.2, *fp;
char ch = 'a';

- vp is a void pointer, so you can assign the address of any type of variable to it 

vp = &a; //ok
vp = ip; //ok 
vp = fp; //ok 

ip = &f; // wrong since type of ip is pointer to int 
fp = ip; // wrong since type of fp is pointer to float 

dereferencing a void pointer 
- the data pointed to by a void pointer cannot be directly dereferenced 
    - we have no type to dereference to 
    - we will always have to cast the address in the void pointer to some other pointer type that points to a concrete data type before dereferencing it 

void* vp;
int a = 100;

vp = &a;
printf("%d", *vp); // wrong 

- the above will not work 
    - because a void pointer has no data type 
    - before you dereference a void pointer it must be type casted to the appropriate pointer type 

void* vp;
int a = 100;
vp = &a;

- void pointer vp is pointing to the address of integer variable a 
    - vp is acting as a pointer to int or (int*)
    - the proper typecast in this cast is (int*)

(int*)vp

- the type of vp temporarily changes from void pointer to pointer to int or (int*)
    - we already know how to dereference a pointer to int, just precede it with indirection operator (*)

*(int*)vp

- type casting changes type of vp temporarily until the evaluation of the expression, everywhere else in the program vp is still a void pointer 

