Null Statement

- null statement is an expression statement with the expression missing 

- C permits a solitary semicolon to be placed wherever a normal program statement can appear 

- the null statement has the effect of doing nothing, but exists for syntactical reasons

- although the null statement might seem useless, it is often used by C programmers in while, for, and do loops

- it is useful when the syntax of the language calls for a statement but no expression evalution 

while((*text++ = getchar()) != '\n')
    ;

- all of the operations are performed inside the looping-conditions part of the while statement

- the null statement is needed because the compiler takes the statement that follows the looping expression as the body of the loop 

- without the null statement, whatever statement that follows in the program is treated as the body of the program loop by the compiler

- the following for statement copies characters from the standard input to the standard output until the end of file is encountered

for(;(c = getchar()) != EOF; putchar(c))
    ;

- the next for statement counts the number of characters that appear in the standard input 

for(count = 0; getchar() != EOF; ++count)
    ;

- the following loop copies the character string pointed to by from to the one pointed to by to 

while((*to++ = *from++) != '\0')
    ;

- When you want to find the index of first occurrence of a certain character in a string 

int a[50] = "the empire strikes back";
int i;

for(i = 0; a[i] != 't'; i++)
    ; // null statement 
      // as no operation is required

