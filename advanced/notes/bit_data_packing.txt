Overview 

- you can pack info into the bits of a byte if you do not need to use the entire byte to represent data 

- two methods are available in C that can be used to pack information together to make better use of memory 
    - bit fields and bitwise operators 

- you could use an unsigned int/long variable to hold the same information 
- OR you could use a structure the same size as unsigned int to hold state information 

Pack information into an int/long variable 

- an int or long can be used to conserve memory stace 

- flags that are used for boolean true or false condition can be represented in a single bit on a computer 
    - each bit in the int can be set to 1 or 0

10111001

- we can access the desired bits of the int using the bit operators provided by C 
    - first bit is true, second bit is false, third bit is true (each represents a flag)
    - we are essentially storing eight different values in a single int 

Example:

- suppose you want to pack five data values into a word because you have to maintain a very large table of these values in memory 
    - assume that three of these data values are flags (f1, f2, f3)
    - the fourth value is an integer called type, which ranges from 1 to 255 
    - the final value is an integer called index, which ranges from 0 to 100,000 

- storing the values of the flags f1, f2, f3 only requires three bits of storage
    - one bit for the true/false value of each flag 

- storing the value of the int type requires eight bits of storage 

- storing the value of the integer index requires 18 bits 

- the total amount of storage needed to store the five data values is 29 bits

- you could define an integer variable that could be used to contain all five of these values 

- unsigned int packed_data; // 32 bits on most systems 

- you can then arbitrarily assign specific bits or fields inside packed_data to be used to store the five data values 
    - packed_data has three unused bits 

- you can apply the correct sequence of bit operations to packed_data to set and retrieve values to and from the fields of the int 

- to set the type field of packed_data to 7 
    - shift the value 7 to the left the appropiate number of places then OR it into packed_data 

packed_data |= 7 << 18;

- to set the type field to the value n, where n is between 0 and 255 
    - to ensure that n is between 0 and 255, you can AND it with 0xff before it is shifted

packed_data |= n << 18;

- the statements only work if you know that the type field is zero 
    - to zero out the type field, you need to first AND it with a value (bitmask) that consists of 0s in the eight bit locations of the type field and 1s everywhere else 

packed_data &= 0xfc03ffff;

- to save yourself of having to calculate the bitmask and also to make the operation independent of the size of an integer 
    - you could instead use the below statement to set the type field to zero 

packed_data &= ~(0xff << 18);

- combining the statements described previously, you can set the type field of packed_data to the value contained in the eight low-order bits of n 

packed_data = (packed_data & ~(0xff << 18)) | ((n & 0xff) << 18);

- you can see how complex the above expression is for accomplishing the relatively simple task of setting the bits in the type field to a specified value 


