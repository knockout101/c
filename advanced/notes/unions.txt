Overview 

- a union is a derived type (similar to a structure) with members that share the same storage space 
    - sometimes the same type of construct needs different types of data 

- used in advanced applications where it is necessary to store different types of data in the same storage area 
    - can be used to save space and for alternating data 
    - a union does not waste storage on variables that are not being used 

- each element in a union is called a member 

- you can define a union with many members 
    - only one member can contain a value at any given time, so only one access of a member at a given time 

- the members of a union can be of any data type 

- most cases, two or more data types 

- programmers responsibility to ensure that the data in a union is referenced with the proper data type 
    - referencing data in a union with a variable of the wrong type is a logic error 

- the operations that can be performed on a union are
    - assigning a union to another union of the same type 
    - taking the address (&) of a union variable 
    - accessing union members 

- unions are particularly useful in embedded programming 
    - situations where direct access to the hardware/memory is needed 

- useful for representing a table that stores a mixture of types in some order 

- you could create an array of unions that store equal-sized units
    - each of which can hold a variety of data types 

- a union could represent a file containing different record types 

- a union could represent a network interface containing different request types 

- structs and unions member allocation is quite different 

- everytime you create an instance of a struct, the computer will lay out the fields in memory, one after the other 
    - allocates storage space for all its members separately 

- with a union, all the members have an offset of zero (union)
    - one common storage space for all its members 

- a union is created with enough space for its largest field 
    - the programmer then decides which value will be stored there 

- if you have a union called quantity, with fields called count, weight, and volume 
    - whether you set the count, weight, or volume field, the data will go into the same space in memory 

- if you want to keep track of a quantity of something  
    - quantity might be a count, a weight, or a volume 

- you could create a struct like this: 

typedef struct
{
    ...
    short count;
    float weight;
    float volue;
    ...
} fruit;

- there are a few reasons why this is not a good idea 
    - it will take up more space in memory 
    - someone might set more than one value 
    - there is nothing called "quantity"

- a union should be used in this situation
    - you could specify something called quantity in a data type 
    - you can decide for each particular piece of data whether you are going to record a count, a weight, or a volume against it

- unions and structs are used for different situations 
    - use structure when your construct should be a group of other things 
    - use union when your construct can be one of many different things but only one ata time 

- unions are typically used in situations where space is premium but more importantly for exlusively alternate data 

- unions ensure that mutally exclusive states remain mutually exclusive 

- unions share a common storage space where structures store several data types simultaneously 
    - a structure can hold an int and a double and a char 
    - a union can hold an int or a double or a char 

Defining a union

- identical as structure but instead of struct its union 

union [union tag]
{
    type1_ indentifier_1;
    type_1 identifier_2;
    ...
    type_N identifier_N
} optional_variable_definitions;

- union tag is optional 

- end of union, before the semicolon, you can specify one or more union variables 

- union definitions are usually placed in a header and included in all source files that use the union type 

union Data 
{
    int i;
    float f;
    char str[20];
} data;

- the above does not define data to contain three distict members called i, f, and str 
    - it defines data to contain a single member that is called either i, f, or str 

- the memory occupied by a union will be large enough to hold the largest member of the union 
    - data type will occupy 20 bytes of member space because this is the maximum space which can be occupied by a character string 

- when a union is defined, it creates a user-defined type 
    - no memory is allocated 
    - to allocate memory for a given union type and work with it, we need to create variables 

- unions can be defined to contain as many members as desired 

- structures can be defined that contain unions, as can arrays 

- pointers to unions can also be declared 
    - their syntax and rules for performing operations are the same as for structs 

Accessing Union Members 

- can access/assign data to members just like with structures 
    - we use the (.) operator to access members of a union 
    - -> operator for pointer variables 

- dot operator is used with a union name to specify a member of that union 

name.member 

- type of name.member is the type specified for member 

union
{
    int code;
    float cost;
} item;

item.code = 1265; // assigns a value to the code member of the structure item 

- you can use -> operator with pointers to unions in the same fashion as structures 

- the indirection operator is used with a pointer to a union to indentify a member of that union 

Union 
{
    int code;
    float cost;
} item, *ptrst;

ptrst = &item;
ptrst -> code = 3451; // assigns an int value to the code member of item 

- the following three expressions are equivalent
    - ptrst -> code 
    - item.code 
    (*ptrst).code 