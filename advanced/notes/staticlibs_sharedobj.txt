Overview

- library
    - a collection (group) of header files adn implementations files, exposed for use by other programs
        - interface expressed in a header file 
        - implementation expressed in a .c file 
        
    - consists of one or more object files, which consist of object code 

    - C functions that can be shared by more than one application should be broken out of an application's source code and compiled and bundled into a library 

    - libraries may call functions in other libraries such as the standard C or math libraries to do various tasks 

    - a programmer has the interface file (headers) to figure out how to use a library 

- Advantage of Libraries 
    - libraries are useful because they allow for fast compilation times 
        - you do have to compile all sources of your dependencies when compiling your application 
    
    - allows application vendors a way to simply release an API to interface with an application

    - libraries also allow for modular development and separation of components 

    - software reuse is a huge benefit of libraries 

    - verison management 
        - libraries can cohabitate old and new versions on a single system 

    - component specialization 
        - specialized developers can focus on their core competency on a single library 
    
- Linking
    - when a C program is compiled, the compiler generates object code (.o or .obj)

    - after generating the object code, the compiler also invokes the linker 

    - linking is the processes of collecting and combining multiple object files in order to create a single executable file
    
    - one of the main tasks for linker is to make the code of library functions (eg printf(), scanf(), sqrt(), ..ect) available to your program 

    - a linker can accomplish this task in two ways 
        - by copying the code of library function to your object code 
        - by making some arrangements so that the complete code of library functions is not copied, but made available at run-time 

    - static linking is the result of the linker making copy of all used library functions to the executable file 

    - dynamic linking does not require the code to be copied, it is done by just placing the name of the library in the binary file 
        - linking happens when the program is run, when both the binary file nad the library are in memory 

Static Linking 

    - when you link your application to another library at compiler time, the library code is part of your application 

    - the primary advantage of static linking is the speed 
        - there will be no symbol (a program entity) resolution at runtime 
        - every piece of the library is part of the binary image (executable) 

    - once everything is bundled into your application, you don't have to worry that the client will have the right library (and version) available on their system 

    - static linking creates larger binary files that utilize more disk space and main memory 

    - once the library is linked and the program is created, you have no way of changing any of the library code without rebuilding the whole program 
        - more time consuming to fix bugs

Dynamic Linking 

    - dynamic linking defers much fo the linking process until a program starts running 
        - performs the linking process "on the fly" as programs are executed in the system 

    - libraries are loaded into memory by programs when they start 

    - during compilation of the library, the machine code is stored on your machine 
        - when you recompile a program that uses this library, only the new code in the program is compiled
            - does not recompile the library into the executable file like in static linking 

    - the main reason for using dynamic linking of libraries is to free your software from the need to recompile with each new release of a library 

    - dynamic linking is the more modern apporoach, and has the advantage of a much smaller executable size 

    - trades off more efficent use of the disk and a quicker linking phase for a small runtime penalty 

    - dynamic linking helps overall performance in two ways 
        - it saves on disk and virtual memory 
            - libraries are only mapped in to the process when needed 
        - all executables dynamically linked to a particular library share a single copy of the library at runtime 
            - ensures that libraries mapped into memory are shared by all processes using them 
            - provides better I/O and swap space utilization of is sparing of phyiscal memory, improving overall system throughput

Library Types 

    - there are two C library types which can be created 

    - static libraries 
        - uses static linking (compile-time, becomes part of the application)
        - each process gets its own copy of the code and data 
        - known as an archive 

    - shared object libraries 
        - dynamically linked at run time 
            - shared objects are not included into the executable component but are tied to the execution 
        - code shared, data is specific to each process 
    
    - there is also the concept of a dynamically loaded/unloaded shared object library that is linked during execution using the dynamic linking loader system functions 

Library Conventions 
    
    - dynamic libraries are called lib something .so 
        - have a file name of the form libname.so (version numbers may be appeneded to the name)
            - the library of thread routines is called libthread.so 
        
    - static libraries are called lib something.a 
        - has a filename of the form libname.a 
        - ".a" library is conceptually the same as the windows ".lib" libraries 

    - you can identify your libraries by looking at the header files you have used 
        - a good hint is to study the #includes that your program uses 
        - each header file that you include potentially represents a library against which you must link 

