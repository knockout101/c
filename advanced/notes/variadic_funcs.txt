Overview 

- the variation or change here is that we are dealing with unknown number of arguments for a function 

- we typically use a variadic function when we do not know the total number of arguments that will be used for a function 
    - one single function could potentially have n number of arguments 
    - variadic function will contribute to the flexibility of the program that you are developing 

- the concept of a variadic function is already used in several C's built- in functions 
    - in printf when you want to print one number or many numbers 
        - printf("the one number = %d", nOneNumber);
        - printf("the first number = %d, the second number = %d", nOneNumber, nSecondNumber);

- if you look at the stdio.h header, you can see that this was implemented using variadic functions 

- you may come up with a need to do this yourself from time to time, so the standard library stdarg.h provides you with routines to write some of your own variadic functions 

Using a variadic function 

- a variadiac function has two parts
    - mandatory arguments 
        - at least one is required and is the first one listed 
        - order is very important 
    - optional arguments 
        - listed after mandatory arguments 

- for the printf()
    - the first parameter is mandatory(" adfad = %d")
    - the optional part comes second and it could be different (nOneNUmber), depends on the situation you are in 

- common practice is to have some number that will tell us how many arguments there are (as the first argument)

Creating a variadic function 

- when creating a variadic function, you must understand how to reference the variable number of arguments used inside the function 
    - you do not know how many there are and you cannot prossibly give them names 
    - you can solve this problem indirectly, through pointers 

- the stdarg.h library header provides you with routines that are implemented as macros
    - you need ot use these when implementing your own function with a variable number of arguments 

- va_list
    - used in situations in which we need to access optional parameters and it is an argument list 
    - represents a data object used to hold the parameters corresponding to the ellipsis part of the parameter list

- va_start
    - will connect our argument list with some argument pointer 
    - the list specified in va_list is the first argument and the second argument is the last fixed parameter 

- va_arg
    - will fetch the current argument connected to the argument list 
    - we will need to know the type of argument that we are reading 

- va_end
    - used in situations when we would like to stop using are variable arguement list(cleanup)

- va_copy
    - used in situations for which we need to save our current location
        - discussed in next lecture 

- to create a function with a variable number of arguemnts, perform the following steps

- provide a function prototype using an ellipsis (three dots)
    - the ellipsis indicates that a variable number of arguments may follow any number of fixed arguments 
        - must have at least one fixed argument

void f1(int n, ...);   // valid 

int f2(const char* s, int k, ...);  // valid 

char f3(char c1, ..., char c2);    // invalid, ellipsis not last 

int f4(...);   // invalid, missing mandatory first fixed argument

- create a va_list type variable in the function definition 

- intialize the variable to an arguement list 
    - need to copy the argument list to the la_list variable using va_start 

double average(double v1, double v2, ...)
{
    va_list parg;
    // More code to go here...
    va_start(parg, v2);
    // More code to go here...
}

- first declare the variable parg of type va_list 

- call va_start() with this as the first argument and specify the last fixed parameter v2 as the second argument 
    - effect of the call to va_start() is to set the variable parg to point to the first variable argument that is passed to the function when it is called 
        - still do not know what type of value this represents

- access the contents of the argument list using va_arg() 
    - takes two arguements: a type va_list variable and a type name 
    - the first time it is called, it returns the first item in the list 
    - the next time it is called it reutnrs the next item in the list 
    - the type argument specifies the type of value returned 
        - has to match the specification 

double someFunction(int lim, ...)
{
    va_list ap;  // declare object to hold arguments 
    va_start(ap, lim);   // initialize ap to argument list  

    double tic = va_arg(ap, double); // retrieve first argument 
    int toc = va_arg(ap, int); // retrieve second argument 
}

- if the argument is 10.0, the above code for tic works fine
    - if the argument is 10, the code may not work 
    - the automatic conversion of double to int that works for assignment doesn't take place here

- you should clean up by using the va_end() macro as your last step 
    - essential to tidy up loose ends left by the process 
    - takes a va_list variable as its argument 
        - resets the ap pointer to NULL 
    - if you omit this call, your program may not work properly 
        - variable may not be usable unless you use va_start to reinitialize it 

va_end(ap);   // clean up 

Summary of rules for variable-length argument lists

- there must be at least one fixed parameter 

- must call va_start() to initialize the value of variable argument list pointer in your function
    - this pointer must be declared as type va_list 

- there needs t obe a mechanism to determine the type of each argument 
    - either there can be a default type assumed or there can be a parameter that allows the argument type to be determined 
        - for example, you could have an extra fixed argument in the average() function that would have the value 0 if the variable arguments were double and 1 if they were long

- you must have a way to determine when the list of arguments is exhausted 
    - for example, the last argument in the variable argument list could have a fixed value called a sentinel value that can be detected because it's different from all the others 
    - OR the first argument could specify the count of the number of arguments in total or in the variable part of the argument list 

- you must call va_end() before you exit a function with a variable number of arguments 
    - if you fail to do so, the function will not work properly

va_copy

- va_arg() does not provide a way to backup to previous arguments 

- it is possible that you may need to process a variable argument list more than once
    - may be useful to preserve a copy of the va_list type variable 
    - use va_copy() - two arguments are both type va_list variables, copies the second argument to the first 

va_list parg;
va_list parg_copy;
va_copy(parg_copy, parg);

- the first statement creates a new va_list variable, parg_copy 
- the next statement copies the contents of parg to parg_copy 
- you can then process the parg and parg_copy independently to extract argument values using va_arg() and va_end() 

- the va_copy() routine copies the va_list object in whatever state it is in
    - if you have executed va_arg() with parg to extract argument values from the list prior to using the va_copy() routine, parg_copy will be in an identical state to parg with some argument values already extracted 

- do not use the va_list object parg_copy as the desination for another copy operation before you have executed va_end() for parg_copy