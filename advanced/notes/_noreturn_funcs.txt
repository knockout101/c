Overview 

- C11 added a second function specifier named _Noreturn 

- the purpose of this is to inform the user and the compiler that a particular function will not return control to the calling program when it completes execution 
    - informing the user helps to prevent misuse of the function 
    - informing the compiler may enable it to make some code optimizations 

- just like the inline function specifier, the _Noreturn function specifier is a hint to the compiler 
    - using the _Noreturn function specifier does not stop a function from returning to its caller 
        - only a promise made by the programmer to the compiler to allow it some more degree of freedom to generate optimized code 
    - the degree of acceptance is implementation defined 

- the exit() function is an example of _Noreturn function 
    - once exit() is called, the calling function never resumes 

- note that this specifier is different from the void return type 
    - a typical void function does return to the calling function 
    - it just does not provide and assignable value 

- if a function specified with the _Noreturn function specifier violates its promise and eventually returns to its caller (by using an explicit return statement or by reaching end of function body)
    - the behavior is undefined 
    - you must NOT return from the function 

- compilers are encouraged, but not required to produce warnings or errors when a _Noreturn function appears to be capable of returning to its caller 