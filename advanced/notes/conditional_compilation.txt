- C preprocessor offers a feature known as conditional compilation 
    - often used to create one program that can be compiled to run on different computer systems 

- if you had a large program that had many dependencies on specific hardware or software
    - you might end up with many defines those values would have to be changed when the program was moved to another computer system 
    - you can help reduce this problem by incorporating the values of these defines for each different machine into the program by using the conditional compilation capabilities of the preprocessor 

- it is also used to switch on and off various statements in the program 
    - debugging statements that print out the values of various variables 
    - trace the flow of program execution 

- conditional compilation enables you to control the execution of preprocessor directives and the compilation of program code 
    - each of the conditional preprocessor directives evaluates an indentifier or a constant integer expression 
        - cast expressions, sizeof expressions and enumeration constants cannot be evaluated in preprocessor directives

- includes a set of commands that tell the compiler to accept or ignore blocks of information or code according to conditions at the time of compilation 

- conditional preprocessor construct is much like the if selection statement 

- every #if constuct ends with an #endif 

- directives #ifdef and #ifndef are provided as shorthand for
    - #if defined(name)
    - #if !defined(name)

- multiple-part conditional preprocessor constructs may be tested with directives #elif and #else 

- this directive checks whether an identifier is currently defined 
    - identifiers can be defined by a #define directive or on the command line 

- to set an identifier

#define UNIX 1 OR #define UNIX 

- most compilers also permit you to define a name to the preprocessor when the program is compiled 
    - use the special option -D to the compiler command 

gcc -D UNIX program.c 

the general form of the #ifdef directive is 

#ifdef identifier 

- identifiers cannot be any keywords or enumeration constants 

- if the identifier specified has been defined by the preprocessor 
    - compile all the code up to the next #else or #endif, whichever comes first 
    - if there is an #else, all code from the #else to the #endif is compiled if the identifier is not defined 

- the #endif directive ends the scope of the #if, #ifdef, #ifndef, #else, or #elif directives 

- the #endif directive has the following syntax 

#endif newline 


#ifndef 

- this directive checks to see if an identifier is not currently defiend 
    - #ifndef is the negative of #ifdef 
    - often used to define a constant if it is not already defined 

- the #ifndef directive

#ifndef identifier 

- Ex 

#ifndef SIZE
    #define SIZE 100 
#endif 

- you can use the #if directive to test the value of a constant expression 
    - a constant expression is specified through a #define statement or via the command line when the program is compiled 

- the general form of the #if directive 

#if constant_expression 

- the operand must be constant integer expression that does not contain any increment (++), decrement (--), sizeof, pointer (*), address (&), and cast operators 
    - you can also use relational and logical operators with the #if directive 

- the constant expression is subject to text replacement and can contain references to identifiers defined in previous #define directives 

- if an identifier used in the expression is not currently defined, the compiler treats the identifier as though it were the constant zero

#else 

- to complement the #ifdef/#ifndef and #if directives, you have the #else directive 
    - work exactly the same way as the else statement does 
    - identifies a group of directives to be executed or statements to be included if the #ifdef/#ifndef or #if condition fails 

- the form #ifdef/#ifndef/#if/#else is must like that of the C if else 
    - main difference is that the preprocessor does not recognize the braces ({}) syntax of marking a block 
    - it uses the #else (if any) and the #endif (which must be present) to mark blocks of directives 
        - these conditional structures can be nested 
    
- with an #else directive, everything from the #else to the #endif is done if the identifier is not defined 

#ifdef UNIX 
#   define DATADIR "/unx1/data"
#else 
#   define DATADIR "\usr\data"
#endif 

- the above has the effectof defining DATADIR to "/unx1/data" if the symbol UNIX has been previously defined and to "\usr\data" otherwise 

- you are allowed to put one or more spaces after the # that begins a preprocessor statement 

- a value can also be assigned to the defined name on the command line 

gcc -D DATADIR=/c/my_data

- this directive is used for multiple-choice selections 
    - similar to the combined use of the else-if statements in C
    - optional 

- the #elif directive has the general form 

#elif constant_expression 
