- the fgetc() function reads a character from a text file that has been opened for reading

- takes a file pointer as its only argument and returns the character read as type int

int mchar = fgetc(pfile);

- the mchar is type int because EOF will be returned if the end of the file has been reached

- the function getc(), which is equivalent to fgetc(), is also available
    - requires an argument of type FILE* and returns the character reaad as type int
    - virtually identical to fgetc()
    - only difference between them is that getc() my be implemented as a macro, whereas fgetc() is a function

- you can read the contents of a file again when necessary
    - the rewind() function positions the file that is specified by the file pointer argument at the beginning

rewind(pfile);

#include <stdio.h>

int main()
{
    FILE *fp;
    int c;

    fp = fopen("file.txt", "r");

    if (fp == NULL)
    {
        perror("Error in opening file");
        return (-1);
    }

    while ((c = fgetc(fp)) != EOF)
        printf(%c, c);
    
    fclose(fp);
    fp = NULL;
    return 0;
}

- you can use the fgets() function to read from any file or stream

char *fgets(char *str, int nchars, FILE *stream)

- the function reads a string into the memory area pointed to by str, from the file specified by stream
    - characters are read until either a '\n' is read or nchars-1 characters have been read from the stream, whichever occurs first

- if a newline character is read, it's retained in the string
    - a '\0' character will be appended to the end of the string

- if there is no error, fgets() returns the pointer, str

- if there is an error, NULL is returned

- reading EOF causes NULL to be returned

#include <stdio.h>

int main()
{
    FILE *fp;
    char str[60];

    fp = fopen("file.txt", "r");

    if (fp == NULL)
    {
        perror("Error opening file");
        return(-1);
    }

    if (fgets(str, 60, fp) != NULL)
        printf("%s", str);

    fclose(fp);
    fp = NULL;

    return 0;
}

- you can get formatted input from a file by using the standard fscanf() function

int fscanf(FILE *stream, const char *format, ...)

- the first argument to this function is the pointer to a FILE object that identifies the stream

- the second argument to this function is the format
    - a C string that contains one or more of the following items
        - whitespace character
        - non-whitespace character
        - format specifiers
        - usage is similar to scanf, but, from a file

- function returns the number of input items successfully matched adn assigned

#include <stdio.h>
#include <stdlib.h>

int main()
{
    char str1[10], str2[10], str[30];
    int year;
    FILE * fp;

    fp = fopen ("file.txt", "w+");
    if (fp != NULL)
        fputs("Hello how are you", fp);
    
    rewind(fp);

    fscanf(fp, "%s %s %s %d", str1, str2, str3, &year);

    printf("Read String1 |%s|\n", str1);
    printf("Read String2 |%s|\n", str2);
    printf("Read String3 |%s|\n", str3);
    printf("Read String4 |%s|\n", str4);

    fclose(fp);

    return 0;
}
